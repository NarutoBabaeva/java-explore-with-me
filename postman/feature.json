{
	"info": {
		"_postman_id": "1d630089-6e72-4012-949c-5a0cb70970a4",
		"name": "feature-comment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32799780"
	},
	"item": [
		{
			"name": "save comment is ok",
			"item": [
				{
					"name": "save user 1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testSaveUser@gmail.com\",\n  \"name\": \"username\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "save category 1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Концерты\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "save event 1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 1,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "save comment 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий успешно создан\", function () {",
									"    pm.response.to.have.status(201);",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson).to.have.property(\"userId\")",
									"    pm.expect(responseJson).to.have.property(\"userName\")",
									"    pm.expect(responseJson).to.have.property(\"content\")",
									"    pm.expect(responseJson).to.have.property(\"createdOn\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1,\n    \"content\": \"comment for event\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "save comment not found",
			"item": [
				{
					"name": "user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь не найден\", function () {",
									"    pm.response.to.have.status(404);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).eql(\"NOT_FOUND\");",
									"    pm.expect(response.reason).eql(\"The required object was not found.\");",
									"    pm.expect(response.message).to.include(\"User with id=999 not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 999,\n    \"content\": \"comment for event\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "event not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь не найден\", function () {",
									"    pm.response.to.have.status(404);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).eql(\"NOT_FOUND\");",
									"    pm.expect(response.reason).eql(\"The required object was not found.\");",
									"    pm.expect(response.message).to.include(\"Event with id=999 not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1,\n    \"content\": \"comment for event\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/999/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"999",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get comments",
			"item": [
				{
					"name": "get comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Запросы на участие успешно получены\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    pm.expect(response.length).to.be.above(0);",
									"    pm.expect(response[0]).to.have.property(\"id\");",
									"    pm.expect(response[0]).to.have.property(\"userId\");",
									"    pm.expect(response[0]).to.have.property(\"userName\");",
									"    pm.expect(response[0]).to.have.property(\"content\");",
									"    pm.expect(response[0]).to.have.property(\"createdOn\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/events/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "event not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Event не найден\", function () {",
									"    pm.response.to.have.status(404);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).eql(\"NOT_FOUND\");",
									"    pm.expect(response.reason).eql(\"The required object was not found.\");",
									"    pm.expect(response.message).to.include(\"Event with id=999 not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/events/999/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"999",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "update comments",
			"item": [
				{
					"name": "update comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий успешно обновлен\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson).to.have.property(\"userId\")",
									"    pm.expect(responseJson).to.have.property(\"userName\")",
									"    pm.expect(responseJson).to.have.property(\"content\")",
									"    pm.expect(responseJson).to.have.property(\"createdOn\")",
									"",
									"    pm.expect(responseJson.content).eql(\"new content\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1,\n    \"content\": \"new content\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "comment not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий не найден\", function () {",
									"    pm.response.to.have.status(404);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).eql(\"NOT_FOUND\");",
									"    pm.expect(response.reason).eql(\"The required object was not found.\");",
									"    pm.expect(response.message).to.include(\"Comment with id=999 not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1,\n    \"content\": \"new content\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments/999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "event not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Событие не найдено\", function () {",
									"    pm.response.to.have.status(404);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).eql(\"NOT_FOUND\");",
									"    pm.expect(response.reason).eql(\"The required object was not found.\");",
									"    pm.expect(response.message).to.include(\"Event with id=999 not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1,\n    \"content\": \"new content\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/999/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"999",
								"comments",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delete comments",
			"item": [
				{
					"name": "delete comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий успешно удален\", function () {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments/1?userId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments",
								"1"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "save comment 1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий успешно создан\", function () {",
									"    pm.response.to.have.status(201);",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson).to.have.property(\"userId\")",
									"    pm.expect(responseJson).to.have.property(\"userName\")",
									"    pm.expect(responseJson).to.have.property(\"content\")",
									"    pm.expect(responseJson).to.have.property(\"createdOn\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1,\n    \"content\": \"comment for event\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete comment user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь не найден\", function () {",
									"    pm.response.to.have.status(404);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).eql(\"NOT_FOUND\");",
									"    pm.expect(response.reason).eql(\"The required object was not found.\");",
									"    pm.expect(response.message).to.include(\"User with id=999 not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments/2?userId=999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments",
								"2"
							],
							"query": [
								{
									"key": "userId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete comment event not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Событие не найдено\", function () {",
									"    pm.response.to.have.status(404);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).eql(\"NOT_FOUND\");",
									"    pm.expect(response.reason).eql(\"The required object was not found.\");",
									"    pm.expect(response.message).to.include(\"Event with id=999 not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/999/comments/2?userId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"999",
								"comments",
								"2"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete comment comment not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий не найден\", function () {",
									"    pm.response.to.have.status(404);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).eql(\"NOT_FOUND\");",
									"    pm.expect(response.reason).eql(\"The required object was not found.\");",
									"    pm.expect(response.message).to.include(\"Comment with id=999 not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments/999?userId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments",
								"999"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "guest get comments",
			"item": [
				{
					"name": "get comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарии успешно получены\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    pm.expect(response.length).to.be.above(0);",
									"    pm.expect(response[0]).to.have.property(\"id\");",
									"    pm.expect(response[0]).to.have.property(\"userId\");",
									"    pm.expect(response[0]).to.have.property(\"userName\");",
									"    pm.expect(response[0]).to.have.property(\"content\");",
									"    pm.expect(response[0]).to.have.property(\"createdOn\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get comments event not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий не найден\", function () {",
									"    pm.response.to.have.status(404);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).eql(\"NOT_FOUND\");",
									"    pm.expect(response.reason).eql(\"The required object was not found.\");",
									"    pm.expect(response.message).to.include(\"Event with id=999 not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "get comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарии успешно получены\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    pm.expect(response.length).to.be.above(0);",
									"    pm.expect(response[0]).to.have.property(\"id\");",
									"    pm.expect(response[0]).to.have.property(\"userId\");",
									"    pm.expect(response[0]).to.have.property(\"userName\");",
									"    pm.expect(response[0]).to.have.property(\"content\");",
									"    pm.expect(response[0]).to.have.property(\"createdOn\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "get comment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий успешно получен\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"userId\");",
									"    pm.expect(response).to.have.property(\"userName\");",
									"    pm.expect(response).to.have.property(\"content\");",
									"    pm.expect(response).to.have.property(\"createdOn\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "update comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий успешно обновлен\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson).to.have.property(\"userId\")",
									"    pm.expect(responseJson).to.have.property(\"userName\")",
									"    pm.expect(responseJson).to.have.property(\"content\")",
									"    pm.expect(responseJson).to.have.property(\"createdOn\")",
									"",
									"    pm.expect(responseJson.content).eql(\"new content\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"new content\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get comment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий успешно обновлен\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"userId\");",
									"    pm.expect(response).to.have.property(\"userName\");",
									"    pm.expect(response).to.have.property(\"content\");",
									"    pm.expect(response).to.have.property(\"createdOn\");",
									"",
									"    pm.expect(response.content).eql(\"new content\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий успешно удален\", function () {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "removed comment not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Событие не найдено\", function () {",
									"    pm.response.to.have.status(404);",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).eql(\"NOT_FOUND\");",
									"    pm.expect(response.reason).eql(\"The required object was not found.\");",
									"    pm.expect(response.message).to.include(\"Comment with id=2 not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}